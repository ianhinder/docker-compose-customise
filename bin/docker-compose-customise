#!/bin/bash

# Usage: docker-compose-customise <envpath> <docker-compose-args>

set -eu
set -x
shopt -s nullglob

env=$1
shift

envcanon=$(readlink -f $env)
secretsfilename=secrets.sops.yml
envargs=$(for envfile in $envcanon/*.env; do echo --env-file $envfile; done)
ymlargs=$(for ymlfile in $envcanon/*.yml; do if [ ${ymlfile##*/} != "$secretsfilename" ]; then echo -f $ymlfile; fi; done)

if [ -r $env/project.conf ]; then
    source $env/project.conf
    # project_reset_time
fi

cd $env/project

envname=${env##*/}
projectpath=${env%/*}
projectname=${projectpath##*/}_${envname}

if [ -n "${project_reset_time+1}" ]; then
    container_ids=( $(docker compose -p $projectname ps -a --format json | jq -r '.[] | .ID') )

    if [ ${#container_ids[*]} -ne 0 ]; then
        for container_id in ${container_ids[*]}; do

            # TODO: we should really be looking at the date the volumes are created
            container_created=$(docker container inspect --format '{{.Created}}' $container_id)
            container_created_s=$(date --date="${container_created}" +%s)
            if [ -n "${project_createds+1}" ]; then
                if [ $container_created_s -lt $project_created_s ]; then
                    project_created_s=$container_created_s
                fi
            else
                project_created_s=$container_created_s
            fi
        done

        project_reset_time_s=$(date --date="$project_reset_time" +%s)

        echo "Project reset time:" $(date --date "@${project_reset_time_s}")
        echo "Project created time:" $(date --date "@${project_created_s}")

        if [ $project_reset_time_s -gt $project_created_s ]; then
            echo "Bringing down $projectname and deleting its volumes"
            docker compose --project-name $projectname down -v
        fi
    else
        echo "WARNING: no containers; cannot determine project creation time for reset check" >&2
    fi
fi

export ENVIRONMENT_NAME="${envname}"

cmdargs="${@}"

command="docker compose --project-name $projectname -f docker-compose.yml $envargs $ymlargs $cmdargs"

if [ -r $env/"$secretsfilename" ]; then
    sops exec-env $env/$secretsfilename "$command"
else
    $command
fi
